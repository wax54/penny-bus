service: image-backend

provider:
  name: aws
  runtime: nodejs16.x
  region: us-east-1
  profile: home
  versionFunctions: false
  logRetentionInDays: 30
  deploymentBucket:
    name: serverless-deployment.pennybusproject.com
  apiGateway:
    binaryMediaTypes:
      - "multipart/form-data"
custom:
  stage: ${opt:stage, self:provider.stage}
  environments:
    dev: dev
    prod: prod
  imageBucketName: ${ssm:/penny/${self:custom.stage}/s3/ImageBucket/name}
  environment: ${self:custom.environments.${self:custom.stage}, self:custom.environments.dev}
  esbuild:
    bundle: true
    minify: true

plugins:
  - serverless-esbuild
  - serverless-offline
functions:
  Create:
    handler: ./Create.handler
    role: ImageLambdaRole
    environment:
      IMAGE_BUCKET: ${self:custom.imageBucketName}
    events:
      - http:
          method: POST
          path: image/upload/resource/{slug}

  RequestPut:
    handler: ./RequestPut.handler
    role: ImageLambdaRole
    environment:
      IMAGE_BUCKET: ${self:custom.imageBucketName}
    events:
      - http:
          method: POST
          path: image/upload

resources:
  Resources:
    ImageLambdaRole:
      Type: "AWS::IAM::Role"
      Properties:
        # This Role name is specified in the image bucket policy in the table service
        RoleName: ImageLambdaRole-${self:custom.stage}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: "LambdaRole-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - logs:*
                  Resource: arn:aws:logs:*:*:*

          - PolicyName: "CreateImagePolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "s3:*"
                  Resource:
                    - "arn:aws:s3:::${self:custom.imageBucketName}/*"
                    - "arn:aws:s3:::${self:custom.imageBucketName}"

  Outputs:
    ImageAPI:
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: ExtImageAPI-${self:custom.stage}
