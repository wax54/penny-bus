service: table-service

provider:
  name: aws
  runtime: nodejs16.x
  region: us-east-1
  profile: home
  versionFunctions: false
  logRetentionInDays: 30
  deploymentBucket:
    name: serverless-deployment.pennybusproject.com

custom:
  stage: ${opt:stage, self:provider.stage}
  deletionPolicies: #dynamoDB deletion policy
    dev: Retain
    prod: Retain
  deletionPolicy: ${self:custom.deletionPolicies.${self:custom.stage}, 'Delete'}

resources:
  Resources:
    PennyImageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: image-${self:custom.stage}.pennybusproject.com
        # AccessControl: PublicRead # No more AccessControl
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
        CorsConfiguration:
          CorsRules: 
            - AllowedHeaders: 
                - '*'
              AllowedMethods: 
                - 'PUT'
                - 'GET'
              AllowedOrigins: 
                - '*'
              ExposedHeaders:
        OwnershipControls:
          Rules:
            - ObjectOwnership: ObjectWriter

    PennyImageBucketName:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /penny/${self:custom.stage}/s3/ImageBucket/name
        Type: String
        Value: !Ref PennyImageBucket

    PennyImageBucketPolicy:
      Type: "AWS::S3::BucketPolicy"
      Properties:
        Bucket: !Ref PennyImageBucket
        PolicyDocument:
          Statement:
            - Action:
                - "s3:GetObject"
              Effect: "Allow"
              Principal: "*"
              Resource:
                "Fn::Join": ["", [!GetAtt PennyImageBucket.Arn, "/*"]]
            - Action:
                - "s3:ListBucket"
              Effect: "Allow"
              Principal: "*"
              Resource: !GetAtt PennyImageBucket.Arn
            - Action:
                - "s3:PutObject"
              Effect: "Allow"
              Principal: 
                AWS: "arn:aws:iam::454636868453:role/ImageLambdaRole-${self:custom.stage}"
              Resource: 
                "Fn::Join": ["", [!GetAtt PennyImageBucket.Arn, "/*"]]

    # TODO allow access via OAI
    # https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-bucket-user-policy-specifying-principal-intro.html#require-cloudfront-urls
    # "Principal":{"CanonicalUser":"Amazon S3 Canonical User ID assigned to origin access identity"}
    # Assign to cloudfront to access directly
    # Assign to Lambda? to access it through image service

    PennyTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: ${self:custom.deletionPolicy}
      Properties:
        TableName: Penny-${self:custom.stage}
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: GSI1PK
            AttributeType: S
          - AttributeName: GSI1SK
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: GSI1PK
                KeyType: HASH
              - AttributeName: GSI1SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

        # StreamSpecification:
        #   StreamViewType: NEW_AND_OLD_IMAGES
    PennyTableName:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /penny/${self:custom.stage}/dynamo/PennyTable/name
        Type: String
        Value: !Ref PennyTable

    PennyTableArn:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /penny/${self:custom.stage}/dynamo/PennyTable/arn
        Type: String
        Value: !GetAtt PennyTable.Arn

    # PennyTableStreamArn:
    #   Type: AWS::SSM::Parameter
    #   Properties:
    #     Name: /penny/${self:custom.stage}/dynamo/relationTable/streamArn
    #     Type: String
    #     Value: !GetAtt PennyTable.StreamArn

    AuthTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: ${self:custom.deletionPolicy}
      Properties:
        TableName: Auth-${self:custom.stage}
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: GSI1PK
            AttributeType: S
          - AttributeName: GSI1SK
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: GSI1PK
                KeyType: HASH
              - AttributeName: GSI1SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        # StreamSpecification:
        #   StreamViewType: NEW_AND_OLD_IMAGES

    AuthTableName:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /global/${self:custom.stage}/dynamo/AuthTable/name
        Type: String
        Value: !Ref AuthTable

    AuthTableArn:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /global/${self:custom.stage}/dynamo/AuthTable/arn
        Type: String
        Value: !GetAtt AuthTable.Arn
